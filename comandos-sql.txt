DROP TABLE IF EXISTS payment, ticket, ticket_price, person_type, spectacle, armchair, room_area, room, theater, payment_method CASCADE;

COPY client (id_client, nome, email, cpf, numero)
FROM 'C:\temp\PessoasFake.csv'
DELIMITER ','
CSV HEADER;

select * from client

 -- CREATE TABLE client (
 --      id_client SERIAL PRIMARY KEY,
 --      nome VARCHAR(255) NOT NULL,
 --      email VARCHAR(255) NOT NULL,
 --      cpf BIGINT NOT NULL,
 --      numero TEXT NOT NULL
 --  );


CREATE TABLE theater (
    id_theater SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL
);

CREATE TABLE room (
    id_room SERIAL PRIMARY KEY,
    id_theater INTEGER NOT NULL,
	number_room Integer NOT NULL,
    capacity INTEGER NOT NULL,
    FOREIGN KEY (id_theater) REFERENCES theater(id_theater)
);

CREATE TABLE room_area (
    id_room_area SERIAL PRIMARY KEY,
    id_room INTEGER NOT NULL,
	nome_area Varchar(355) NOT NULL,
	capacity INTEGER NOT NULL,
    FOREIGN KEY (id_room) REFERENCES room(id_room)
);

CREATE TABLE armchair (
    id_armchair SERIAL PRIMARY KEY,
    id_room_area INTEGER NOT NULL,
    numero INTEGER NOT NULL,
    FOREIGN KEY (id_room_area) REFERENCES room_area(id_room_area)
);

CREATE TABLE spectacle (
    id_spectacle SERIAL PRIMARY KEY,
    id_room INTEGER NOT NULL,
    data_time TIMESTAMP NOT NULL,
    duration INTERVAL NOT NULL,
    FOREIGN KEY (id_room) REFERENCES room(id_room)
);

CREATE TABLE person_type (
    id_person_type SERIAL PRIMARY KEY,
    type_name VARCHAR(255) NOT NULL
);

CREATE TABLE ticket_price (
    id_ticket_price SERIAL PRIMARY KEY,
    id_spectacle INTEGER NOT NULL,
    id_person_type INTEGER NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_spectacle) REFERENCES spectacle(id_spectacle),
    FOREIGN KEY (id_person_type) REFERENCES person_type(id_person_type)
);

CREATE TABLE ticket (
    id_ticket SERIAL PRIMARY KEY,
	id_spectacle INTEGER NOT NULL,
    id_client INTEGER NOT NULL,
	id_armchair INTEGER NOT NULL,
    id_ticket_price INTEGER,
	FOREIGN KEY (id_spectacle) REFERENCES spectacle (id_spectacle),
    FOREIGN KEY (id_client) REFERENCES client(id_client),
	FOREIGN KEY (id_armchair) REFERENCES armchair(id_armchair),
    FOREIGN KEY (id_ticket_price) REFERENCES ticket_price(id_ticket_price)
);

CREATE TABLE payment_method (
    id_payment_method SERIAL PRIMARY KEY,
    method_payment VARCHAR(255)
);

CREATE TABLE payment (
    id_payment SERIAL PRIMARY KEY,
    id_ticket INTEGER NOT NULL,
    id_payment_method INTEGER NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    status INTEGER NOT NULL,
    FOREIGN KEY (id_ticket) REFERENCES ticket(id_ticket),
    FOREIGN KEY (id_payment_method) REFERENCES payment_method(id_payment_method)
);


-- Populando a tabela theater
INSERT INTO theater (nome, address) VALUES
('Teatro Municipal', 'Rua das Flores, 123'),
('Teatro Central', 'Avenida Paulista, 456'),
('Teatro da Cidade', 'Rua XV de Novembro, 789'),
('Teatro das Artes', 'Avenida Rio Branco, 101'),
('Teatro Imperial', 'Praça da Liberdade, 202'),
('Teatro Popular', 'Rua do Comércio, 303'),
('Teatro Novo Horizonte', 'Avenida dos Sonhos, 404'),
('Teatro Estrela', 'Rua das Palmeiras, 505'),
('Teatro Encanto', 'Travessa do Sol, 606'),
('Teatro Aurora', 'Rua Bela Vista, 707');

-- Populando a tabela room
INSERT INTO room (id_theater, number_room, capacity)
SELECT id_theater, num, 1000
FROM generate_series(1, 10) AS id_theater,  -- id_theater de 1 a 10
     generate_series(1, 100) AS num;  -- number_room de 1 a 10



-- Populando a tabela room_area
INSERT INTO room_area (id_room, nome_area, capacity)
SELECT id_room, nome_area, capacity
FROM generate_series(1, 1000) AS id_room,  -- id_room de 1 a 1000
     (VALUES
        ('Normal', 600),
        ('vip', 200),
        ('Camarote', 200)
     ) AS areas(nome_area, capacity);



-- Populando a tabela armchair
INSERT INTO armchair (id_room_area, numero)
SELECT id_room, num
FROM generate_series(1, 3000) AS id_room,  -- id_room_area de 1 a 300
     generate_series(1, 1000) AS num;  -- numero de 1 a 100



-- Populando a tabela spectacle
INSERT INTO spectacle (id_room, data_time, duration)
SELECT
    r.id_room,
    dates.data_time,
    (INTERVAL '1 hour' + (random() * INTERVAL '1 hour')) AS duration -- Duração entre 1h e 2h
FROM room r
JOIN (
    -- Gerando datas futuras apenas para sábado e domingo
    SELECT (NOW()::DATE + i * INTERVAL '1 day' + INTERVAL '18:00:00') AS data_time
    FROM generate_series(0, 366) i  -- Gera datas para os próximos 366 dias
    WHERE EXTRACT(DOW FROM (NOW()::DATE + i * INTERVAL '1 day')) IN (0, 6) -- Filtra apenas sábados (6) e domingos (0)
) dates ON TRUE;



-- Populando a tabela person_type
INSERT INTO person_type (type_name) VALUES
('VIP'),
('INTEIRA'),
('MEIA');

-- Populando a tabela payment_method
INSERT INTO payment_method (method_payment) VALUES
('PIX'),
('DEBITO'),
('CREDITO');


-- Populando a tabela ticket_price
INSERT INTO ticket_price (id_spectacle, id_person_type, price)
SELECT
    s.id_spectacle,
    p.id_person_type,
    CASE
        WHEN p.id_person_type = 1 THEN 0.00  -- VIP (Gratuito)
        WHEN p.id_person_type = 2 THEN 25.00 -- INTEIRA
        WHEN p.id_person_type = 3 THEN 50.00 -- MEIA
    END AS price
FROM generate_series(1, 104000) AS s(id_spectacle)  -- Gerando IDs dos shows de 1 a 1020
CROSS JOIN generate_series(1, 3) AS p(id_person_type); -- Criando 3 preços por show



-- Populando a tabela ticket
INSERT INTO ticket (id_spectacle, id_client, id_armchair, id_ticket_price)
SELECT
    s.id_spectacle,
    (FLOOR(random() * 3000000) + 1) AS id_client,  -- Cliente aleatório entre 1 e 3000000
    a.id_armchair,
    tp.id_ticket_price
FROM spectacle s
JOIN (
    -- Seleciona as cadeiras corretamente para cada show (1000 cadeiras por espetáculo)
    SELECT id_armchair,
           (id_armchair - 1) / 1000 + 1 AS id_spectacle  -- Distribui cadeiras de 1 a 1000 para cada show
    FROM armchair
    WHERE id_armchair <= 104000000  -- Garante que temos 1000 cadeiras por espetáculo (1000 x 104000)
) a ON s.id_spectacle = a.id_spectacle
JOIN ticket_price tp ON s.id_spectacle = tp.id_spectacle
ORDER BY s.id_spectacle, a.id_armchair
LIMIT 104000000;  -- 104000 espetáculos × 1000 tickets cada


-- Populando a tabela payment
INSERT INTO payment (id_ticket, id_payment_method, price, status)
SELECT
    t.id_ticket,
    (FLOOR(random() * 3) + 1) AS id_payment_method,  -- Sorteia um método de pagamento (1 a 3)
    tp.price,
    (FLOOR(random() * 2)) AS status  -- Status aleatório: 0 (pendente) ou 1 (pago)
FROM ticket t
JOIN ticket_price tp ON t.id_ticket_price = tp.id_ticket_price
ORDER BY t.id_ticket
LIMIT 9000000;  -- Inserindo 520000 registros, um para cada ticket


